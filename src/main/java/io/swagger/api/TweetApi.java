/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Tweet;
import io.swagger.model.TweetState;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-07-05T12:48:52.974Z")

@Validated
@Api(value = "tweet", description = "the tweet API")
@RequestMapping(value = "/v1")
public interface TweetApi {

    @ApiOperation(value = "Retrieve the list of tweets", nickname = "tweetEnum", notes = "Retrieve the list of tweets", response = Tweet.class, responseContainer = "List", tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tweet.class, responseContainer = "List") })
    @RequestMapping(value = "/tweet",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Tweet>> tweetEnum();


    @ApiOperation(value = "Retrieves the most used hastags", nickname = "tweetFindHashtag", notes = "Retrieves the most used hastags", response = String.class, responseContainer = "List", tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/tweet/findHashtag",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> tweetFindHashtag(@ApiParam(value = "Number of hashtags to retrieve", defaultValue = "10") @Valid @RequestParam(value = "count", required = false, defaultValue="10") Integer count);


    @ApiOperation(value = "Retrieves tweets posted by a given user", nickname = "tweetFindValidatedByUser", notes = "Retrieves tweets posted by a given user", response = Tweet.class, responseContainer = "List", tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tweet.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/tweet/findValidatedByUser",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Tweet>> tweetFindValidatedByUser(@NotNull @ApiParam(value = "Username to retrieve tweets for", required = true) @Valid @RequestParam(value = "username", required = true) String username);


    @ApiOperation(value = "Sets twitter livestream on or off", nickname = "tweetLiveStream", notes = "Sets twitter livestream on or off", response = TweetState.class, tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TweetState.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied") })
    @RequestMapping(value = "/tweet/livestream",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<TweetState> tweetLiveStream(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "enabled", required = true) Boolean enabled);


    @ApiOperation(value = "Validates a given tweet", nickname = "tweetValidate", notes = "Validates a tweet given its tweetId", response = Tweet.class, tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Tweet.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Tweet not found") })
    @RequestMapping(value = "/tweet/{tweetId}/validate",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Tweet> tweetValidate(@ApiParam(value = "",required=true) @PathVariable("tweetId") Long tweetId);

}
